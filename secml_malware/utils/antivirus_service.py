import requests, time, vt, io
from abc import abstractmethod

class AntivirusService:
    def __init__(self, apiKey:str=None):
        if isinstance(apiKey, str):
            apiKey = [apiKey]
        self._apiKey = apiKey
        self._current_index = 0
        self._session = requests.Session()
        
    @abstractmethod   
    def scan_file(self, file, apiUrl, filename):
        raise NotImplementedError("This method is abstract, subclasses must implement scan_file method.")

class NetAV(AntivirusService):
    def scan_file(self, file, apiUrl, filename:str=None):
        headers = {
            'Content-Type': 'application/octet-stream', 
            'Filename' : filename
        }
        response = self._session.post(url=apiUrl, headers=headers, data=file)
        if response.status_code == 200:
            return response.json()
        else:
            raise ConnectionError("Oops! Something went wrong. Error code "+\
                str(response.status_code)+".")
        
class VirusTotal(AntivirusService):
    def scan_file(self, file):
        while True:
            bytes_io = io.BytesIO(file)
            bufferedFile = io.BufferedReader(bytes_io)
            apikey = self._apiKey[self._current_index]
            
            with vt.Client(apikey, trust_env=True) as client:
                analysis = client.scan_file(bufferedFile)
                apiUrl = "https://www.virustotal.com/api/v3/analyses"
                get_url = (apiUrl + "/{}").format(analysis.id)
                
                if len(self._apiKey) > 1:
                    max_attempts = 10
                    for _ in range(max_attempts):
                        result = client.get_json(get_url)
                        if result["data"]["attributes"]["results"]:
                            return result
                        time.sleep(2)
                    self._current_index = (self._current_index + 1) % len(self._apiKey)
                    continue
                else:
                    result = client.get_json(get_url)
                    while not result["data"]["attributes"]["results"]:
                        time.sleep(2)
                        result = client.get_json(get_url)
                    return result
        
class MetaDefender(AntivirusService):
    def scan_file(self, file, filename:str=None):
        while True:
            apikey = self._apiKey[self._current_index]
            headers = {
                "apikey": apikey,
                "Content-Type": "application/octet-stream",
                "filename" : filename
            }
            apiUrl = "https://api.metadefender.com/v4/file"
            response = self._session.post(apiUrl, headers=headers, data=file)
            if response.status_code == 429:
                error_code = response.json()["error"]["code"]
                error_message = response.json()["error"]["messages"]
                if (error_code == 429000):
                    del self._apiKey[self._current_index]    
                print(f"Error code: {error_code}. Message: {error_message}. Wait...")
                if len(self._apiKey) == 0:
                        raise ConnectionError("You have used all provided API keys up to the limit.")
                time.sleep(2)
                self._current_index = (self._current_index + 1) % len(self._apiKey)
                continue

            if response.status_code != 200:
                raise ConnectionError(f"Oops! Something went wrong. Error code {response.status_code}.")    
            dataId = response.json()["data_id"]
            resultUrl = (apiUrl + "/{}").format(dataId)
            headers = {
                "apikey": apikey,
                "x-file-metadata": "1"
            }
            response = self._session.get(resultUrl, headers=headers)
            if response.status_code != 200:
                raise ConnectionError(f"Oops! Something went wrong. Error code {response.status_code}.") 
            while(not response.json()["scan_results"]["total_avs"]):
                    response = self._session.get(resultUrl, headers=headers)
                    if response.status_code != 200:
                        raise ConnectionError(f"Oops! Something went wrong. Error code {response.status_code}.")
            break 
        return response.json()