from secml.array import CArray
from secml.ml.classifiers import CClassifier
from secml_malware.utils.antivirus_service import MetaDefender, NetAV, VirusTotal
from secml_malware.utils.is_valid_url import isValidUrl
import numpy as np
import hashlib

class CClassifierRemote(CClassifier):
    
    def __init__(self, url:str=None, antivirus:str=None, apiKey:str=None):
        """
        Creates the Remote Classifier.

        Parameters
        ----------
        url : str, optional
            Remote server URL
        antivirus : str, optional
            Antivirus service name
        apiKey : str, optional
            API key for authentication
        """
        super(CClassifierRemote, self).__init__()
        self._url = url
        self._antivirus = antivirus
        if antivirus is None and not isValidUrl(url):
            raise ValueError("Please, provide a valid URL or container name in the form of "
                             "http://<container_name>:<port>/<route>.")
        self._apiKey = apiKey
        self._classes = np.array([0, 1])
        self._n_features = 2
        self._av = self.initializeAV()

    def get_apikey(self):
        return self._apiKey

    def get_av(self):
        return self._antivirus

    def get_url(self):
        return self._url

    def _backward(self, w):
        raise NotImplementedError("Backward is not implemented.")

    def _fit(self, x, y):
        raise NotImplementedError("Fit is not implemented.")

    def initializeAV(self):
        # default value if no conditions are met
        obj = None

        if self.get_av() == "virustotal":
            obj = VirusTotal(self._apiKey)

        elif self.get_av() == "metadefender":
            obj = MetaDefender(self._apiKey)

        elif self.get_av() is None:
            obj = NetAV()

        return obj

    def return_verdict(self, response):
        """
        Given the response, it calculates the probability of the examined file being a malware
        as a CArray([goodware, malware])
        :param response:
        :return:
        """
        if self.get_av() == "virustotal":
            # Possible responses from VirusTotal:
            # malicious, suspicious, undetected, harmless, timeout, confirmed-timeout, failure, type-unsupported
            malicious = response["data"]["attributes"]["stats"]["malicious"]
            suspicious = response["data"]["attributes"]["stats"]["suspicious"]
            undetected = response["data"]["attributes"]["stats"]["undetected"]
            harmless = response["data"]["attributes"]["stats"]["harmless"]
            
            total_avs = malicious + suspicious + undetected + harmless
            total_detected_avs = malicious + suspicious
           
            if total_avs == 0:
                raise ValueError("No antivirus responses were recorded from VirusTotal.")
            
            score = total_detected_avs / total_avs
            score = CArray([1 - score, score])
            label = score.argmax(axis=1).ravel()
            return (label, score)

        elif self.get_av() == "metadefender":
            total_detected_avs = response["scan_results"]["total_detected_avs"]
            total_avs = response["scan_results"]["total_avs"]
            if total_avs == 0:
                raise ValueError("No antivirus responses were recorded from Metadefender.")
            
            score = total_detected_avs / total_avs
            score = CArray([1 - score, score])
            label = score.argmax(axis=1).ravel()
            return (label, score)

        elif self.get_av() is None:
            score = float(response["score"])
            label = int(response["label"])
            score = CArray([1 - score, score])
            label = CArray(label)
            return (label, score)

    def _forward(self, x):

        x_list = x.tolist()[0]
        x_bytes = b''.join([bytes([i]) for i in x_list])

        # Bytestring conversion to sha256 for identifying the file
        hash_filename = hashlib.sha256(x_bytes)
        hex_hash = hash_filename.hexdigest()

        engine = self.get_av()

        if engine is None:
            response = self._av.scan_file(x_bytes, self._url, hex_hash)

        elif engine == "virustotal":
            response = self._av.scan_file(x_bytes)
            
        elif engine == "metadefender":
            response = self._av.scan_file(x_bytes, hex_hash)

        return self.return_verdict(response)
    
    def predict(self, x, return_decision_function=False):

        label, score = self._forward(x)
        return (label, score) if return_decision_function is True else label